// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bizio/user-service/pkg/service/v1/cloudpubsub (interfaces: Queue)

// Package mock is a generated GoMock package.
package mock

import (
	pubsub "cloud.google.com/go/pubsub"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQueue is a mock of Queue interface
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// GetMessages mocks base method
func (m *MockQueue) GetMessages(arg0 chan *pubsub.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMessages indicates an expected call of GetMessages
func (mr *MockQueueMockRecorder) GetMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockQueue)(nil).GetMessages), arg0)
}

// GetTopic mocks base method
func (m *MockQueue) GetTopic(arg0 string) (*pubsub.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopic", arg0)
	ret0, _ := ret[0].(*pubsub.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopic indicates an expected call of GetTopic
func (mr *MockQueueMockRecorder) GetTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopic", reflect.TypeOf((*MockQueue)(nil).GetTopic), arg0)
}
